/*
  MPR121_LoRaE5.h
  Full-featured Arduino library header for MPR121 tailored for LoRa E5 projects.
  - Exposes full register map (commonly used registers) as constants
  - Exposes high-level APIs and low-level read/write/block helpers
  - Designed to be paired with MPR121_LoRaE5.cpp implementation

  Generated by ChatGPT (GPT-5 Thinking mini)
*/

#ifndef MPR121_LORAE5_H
#define MPR121_LORAE5_H

#include <Arduino.h>
#include <Wire.h>

// Many registers are defined below (not every obscure reserved reg, but the
// full commonly-used map from the datasheet and Adafruit implementation).
namespace MPR121_REG {
  // Touch status
  static const uint8_t TOUCH_STATUS_L = 0x00;
  static const uint8_t TOUCH_STATUS_H = 0x01;

  // Filtered data (0x04..0x1D) 2 bytes per electrode
  static const uint8_t FILT_DATA_0_L = 0x04; // .. +1 for high

  // Baseline values (0x1E..0x35) 1 byte per electrode
  static const uint8_t BASELINE_0 = 0x1E;

  // Touch/Release thresholds (0x41..0x5A) pairs per electrode
  static const uint8_t TOUCH_THRESH_0 = 0x41;
  static const uint8_t RELEASE_THRESH_0 = 0x42;

  // Filter & baseline registers (datasheet calls them MHD_R etc)
  static const uint8_t MHD_R = 0x2B;
  static const uint8_t NHD_R = 0x2C;
  static const uint8_t NCL_R = 0x2D;
  static const uint8_t FDL_R = 0x2E;
  static const uint8_t MHD_F = 0x2F;
  static const uint8_t NHD_F = 0x30;
  static const uint8_t NCL_F = 0x31;
  static const uint8_t FDL_F = 0x32;

  // Electrode configuration
  static const uint8_t ECR = 0x5E;

  // Config registers
  static const uint8_t SOFTRESET = 0x80; // write 0x63 to reset
  static const uint8_t CONFIG1 = 0x5B;
  static const uint8_t CDC = 0x5C;
  static const uint8_t CONFIG2 = 0x5D; // sample interval and filter config

  // Autoconfig registers
  static const uint8_t AUTO_CONFIG_CONTROL = 0x7B;
  static const uint8_t AUTO_CONFIG_USL = 0x7D;
  static const uint8_t AUTO_CONFIG_LSL = 0x7E;
  static const uint8_t AUTO_CONFIG_TARGET = 0x7F;

  // Proximity related (if using prox electrodes)
  static const uint8_t PROX0 = 0x18; // example offset (not full prox map)

  // Baseline Control - not exhaustive; datasheet has more
}

class MPR121_LoRaE5 {
public:
  // Default I2C address when ADDR pin tied to GND
  static const uint8_t DEFAULT_ADDR = 0x5A;

  // Constructor
  MPR121_LoRaE5();

  // Initialize the device (defaults mimic Adafruit safe defaults).
  // - i2c_addr: device address (0x5A default)
  // - wire: TwoWire instance
  // - touchThreshold, releaseThreshold: per-channel default thresholds
  // - useInterrupt: if true, user must call configureIRQPin() and attach ISR as desired
  bool begin(uint8_t i2c_addr = DEFAULT_ADDR, TwoWire &wire = Wire, uint8_t touchThreshold = 12, uint8_t releaseThreshold = 6, bool autoconfig = false);

  // Software reset
  void softReset();

  // Put device into Stop Mode (ECR = 0x00) and Run Mode (ECR set to enable electrodes)
  void stopMode();
  void runMode(uint8_t electrodesEnableMask = 0x0C); // default enables 12 electrodes in common pattern

  // Sampling interval control (ESI) -- ms options: 1,2,4,8,16,32,64,128
  // sfi sets sample filter iterations (0..3)
  void setSampleIntervalMs(uint16_t ms, uint8_t sfi = 0);

  // CDC: charge/discharge current control (0..63)
  void setCDC(uint8_t cdc);
  uint8_t getCDC();

  // Per-channel threshold helpers
  void setThresholds(uint8_t touch, uint8_t release); // sets for all channels
  void setThreshold(uint8_t channel, uint8_t touch, uint8_t release);
  void getThreshold(uint8_t channel, uint8_t &touch, uint8_t &release);

  // Read touch status
  uint16_t touched(); // returns 12-bit mask for electrodes 0..11
  bool isTouched(uint8_t pin);

  // Read filtered data (10-bit) and baseline (8-bit)
  uint16_t filteredData(uint8_t channel);
  uint8_t baselineData(uint8_t channel);

  // Read proximity / touch filtered raw registers (if using prox)
  // (library exposes generic block reads so user can access prox registers directly)

  // IRQ helpers
  void configureIRQPin(int irqPin); // set the pin the MPR121 IRQ line is connected to
  uint16_t handleIRQ_and_getTouchMask(); // read status to clear interrupt
  int irqPin() { return _irqPin; }

  // Low-level register helpers (exposed so advanced users can access functionality not wrapped above)
  uint8_t readRegister(uint8_t reg);
  void writeRegister(uint8_t reg, uint8_t value);
  void readRegisterRegion(uint8_t reg, uint8_t *buffer, uint8_t len);
  void writeRegisterRegion(uint8_t reg, const uint8_t *buffer, uint8_t len);

  // Autoconfig convenience
  bool enableAutoConfig(uint8_t targetLevel, uint8_t chargeCurrent = 0x10);
  void disableAutoConfig();

  // Utility
  uint8_t i2cAddress() const { return _i2cAddr; }

private:
  uint8_t _i2cAddr;
  TwoWire *_wire;
  int _irqPin;

  // Internal helpers
  void _defaultFilterAndBaseline();
};

#endif // MPR121_LORAE5_H